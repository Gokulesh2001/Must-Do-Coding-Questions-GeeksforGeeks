class BinaryTree
{
    static ArrayList <Integer> verticalOrder(Node root)
    {
        // add your code here
       // Code here
    ArrayList<Integer> list = new ArrayList<Integer>();
    ArrayList<ArrayList<Integer> > aList =  
                  new ArrayList<ArrayList<Integer> >(); 
    int hd=0;
    if(root==null){
        return list;
    }
   TreeMap<Integer,ArrayList<Integer>> map= new TreeMap<Integer,ArrayList<Integer>>();
    Queue<Node> q=new LinkedList<Node>();
     root.hd = hd; 
    q.add(root);
    while(!q.isEmpty()){
        Node temp=q.remove();
         hd=temp.hd;
        
         if(map.get(hd)==null){
            ArrayList <Integer> l=new ArrayList <Integer>();
            l.add(temp.data);
            map.put(hd,l);
        }
        else{
            ArrayList<Integer> l=map.get(hd);
            l.add(temp.data);
            map.put(hd,l);
        }
        if(temp.left!=null){
            temp.left.hd=hd-1;
            q.add(temp.left);
        }
         if(temp.right!=null){
            temp.right.hd=hd+1;
            q.add(temp.right);
        }
    }
   for(Map.Entry<Integer,ArrayList<Integer>> m:map.entrySet()){
           aList.add(m.getValue());
        }
        for(int i=0;i<aList.size();i++){
            for(int j=0;j<aList.get(i).size();j++){
                list.add(aList.get(i).get(j));
            }
            
        }
        return list;
    }
}