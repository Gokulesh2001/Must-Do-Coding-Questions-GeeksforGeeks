class Res { 
    int val; 
} 
class Tree
{
    int max_path_sum;
    int maxPathSum(Node root)
    { 
        Res res = new Res(); 
        res.val = Integer.MIN_VALUE; 
        maxPathSumUtil(root, res); 
        return res.val;
    } 
    int maxPathSumUtil(Node node, Res res) { 
  
        // Base cases 
        if (node == null) 
            return 0; 
        if (node.left == null && node.right == null) 
            return node.data; 
  
        // Find maximum sum in left and right subtree. Also 
        // find maximum root to leaf sums in left and right 
        // subtrees and store them in ls and rs 
        int ls = maxPathSumUtil(node.left, res); 
        int rs = maxPathSumUtil(node.right, res); 
  
        // If both left and right children exist 
        if (node.left != null && node.right != null) { 
  
            // Update result if needed 
            res.val = Math.max(res.val, ls + rs + node.data); 
  
            // Return maxium possible value for root being 
            // on one side 
            return Math.max(ls, rs) + node.data; 
        } 
  
        // If any of the two children is empty, return 
        // root sum for root being on one side 
        return (node.left == null) ? rs + node.data 
                : ls + node.data; 
    } 
}


Another way:(But not correct)

class Tree
{
    int max_path_sum;
    int maxPathSum(Node root)
    { 
        // code here
        max_path_sum=Integer.MIN_VALUE;
        
        pathSum(root);
        
        
        return max_path_sum; 
    } 
    int pathSum(Node root){
        if(root==null){
            return 0;
        }
        
        int left=Math.max(0,pathSum(root.left));
        int right=Math.max(0,pathSum(root.right));
        max_path_sum=Math.max(max_path_sum,left+right+root.data);
         return Math.max(left,right)+root.data;
    }
}