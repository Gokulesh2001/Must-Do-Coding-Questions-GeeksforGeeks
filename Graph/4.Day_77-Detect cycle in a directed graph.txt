class Solution {
    
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean visited[]=new boolean[V];
        boolean recursiveStack[]=new boolean[V];
        for(int i=0;i<V;i++){
            
                if(dfs(i,adj,visited,recursiveStack)){
                    return true;
                }
           
        }
     return false;
        
    }
    public boolean dfs(int index,ArrayList<ArrayList<Integer>> adj,boolean visited[],boolean recursiveStack[]){
        if(recursiveStack[index]){
            return true;
        }
        if(visited[index]){
            return false;
        }
        visited[index]=true;
        recursiveStack[index]=true;
        List<Integer> list=adj.get(index);
        for(Integer neighbour:list){
            
            if(dfs(neighbour,adj,visited,recursiveStack)){
                return true;
            }
            
        }
        visited[index]=true;
        recursiveStack[index]=false;
        
        return false;
    }
    
}