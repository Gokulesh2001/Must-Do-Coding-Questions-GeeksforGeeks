class Solution
{
    
    boolean ans=false;
    public boolean is_Possible(int[][] grid)
    {
        // Code here
         
        int n=grid.length;
        int m=grid[0].length;
        boolean visited[][]=new boolean[grid.length][grid[0].length];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1 ){
                   
                    dfs(grid,i,j,visited);
                     
                    
                }
            }
        }
        return ans;
    }
    public void dfs(int[][] grid,int i,int j,boolean visited[][]){
       
        if (i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] == 0)
            return;
            if(grid[i][j]==2){
                ans=true;
            }
       grid[i][j] = 0;
       
       dfs(grid,i-1,j,visited);
       dfs(grid,i,j-1,visited);
       dfs(grid,i,j+1,visited);
       dfs(grid,i+1,j,visited);
       
    }
}