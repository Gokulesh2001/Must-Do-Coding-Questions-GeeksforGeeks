class Solution
{
    
    Stack<Integer> st=new Stack<Integer>();
    boolean visited[];
    boolean visited2[];
    HashSet<Integer> set2=new HashSet<Integer>();
    public int kosaraju(int V, ArrayList<ArrayList<Integer>> adj) {
        //code here
        visited=new boolean[V];
        visited2=new boolean[V];
        ArrayList<ArrayList<Integer>> transAdj=new ArrayList<ArrayList<Integer>>();
        int countSCC=0;
        for (int v = 0; v < V; v++){
            transAdj.add(new ArrayList<Integer>());
        }
        for (int v = 0; v < V; v++) 
        { 
            // Recur for all the vertices adjacent to this vertex 
                List<Integer> list=adj.get(v);
                for(Integer child:list){
                transAdj.get(child).add(v); 
                }
        } 
        for(int i=0;i<V;i++){
            if(!visited[i]){
            dfsOfGraph(i,adj);
            }
        }
        
        while(!st.isEmpty()){
            int temp=st.peek();
            if(visited2[temp]){
                st.pop();
                continue;
            }
            dfsOfGraphRev(temp,transAdj);
            countSCC++;
        }
      return countSCC;  
    }
    
    public void dfsOfGraph(int s, ArrayList<ArrayList<Integer>> adj){
        visited[s]=true;
        
        
        
        for(int i=0;i<adj.get(s).size();i++){
            if(visited[adj.get(s).get(i)]==false){
                
                dfsOfGraph(adj.get(s).get(i),adj);
                
            }
        }
        st.push(s);
        
    }
    public void dfsOfGraphRev(int s, ArrayList<ArrayList<Integer>> adj){
        visited2[s]=true;
        
        
        
        for(int i=0;i<adj.get(s).size();i++){
            if(visited2[adj.get(s).get(i)]==false){
                
                dfsOfGraphRev(adj.get(s).get(i),adj);
                
            }
        }
        
        
    }
}
