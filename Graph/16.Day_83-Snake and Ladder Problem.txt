class Solution{
    static class Node{
        int vertex;
        int dist;
        // Node(int v,int d){
        //     vertex=v;
        //     dist=d;
        // }
    }
    static int minThrow(int M, int arr[]){
        // code here
        int min=0;
        int N=30;
        int matrix[]=new int[N];
        int visited[]=new int[N];
        Queue<Node> q=new LinkedList<>();
        for(int i=0;i<N;i++){
            matrix[i]=-1;
        }
        for(int i=0;i<arr.length-1;i+=2){
            
            
            matrix[arr[i]-1]=arr[i+1]-1;
        }
        
       Node qe = new Node();
        qe.vertex = 0;
        qe.dist = 0;
         visited[0] = 1;
          q.add(qe);
        
        while(!q.isEmpty()){
            qe=q.remove();
            int v=qe.vertex;
            int dist=qe.dist;
            if(v==N-1){
                break;
            }
            for(int i=v+1;i<=v+6&&i<N;i++){
                if(visited[i]==0){
                    Node a=new Node();
                    a.dist=dist+1;
                    visited[i]=1;
                    
                    if(matrix[i]!=-1){
                    a.vertex=matrix[i];
                    }
                    else{
                        a.vertex=i;
                    }
                    q.add(a);
                    System.out.println(a.vertex);
                }
            }
            
        }
        
        return qe.dist;
    }
}