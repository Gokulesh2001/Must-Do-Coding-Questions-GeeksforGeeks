class Solution {
    HashMap<Integer,Integer> incomingDegree=new HashMap<>();
    public int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) {
        // add your code here
        int[] result=new int[V];
        if(isCyclic(V,adj)){
            return result;
        }
        
        Queue<Integer> q=new LinkedList<Integer>();
        for(int i=0;i<V;i++){
            incomingDegree.put(i,0);
        }
        for (int i = 0; i < V; i++) {
            ArrayList<Integer> temp
                = (ArrayList<Integer>)adj.get(i);
            for (int node : temp) {
                incomingDegree.put(node,incomingDegree.getOrDefault(node,0)+1);
            }
        }
        for(Map.Entry<Integer,Integer> entry:incomingDegree.entrySet()){
            if(entry.getValue()==0){
                q.add(entry.getKey());
            }
        }
        int index=0;
        while(!q.isEmpty()){
            int temp=q.remove();
            result[index++]=temp;
            List<Integer> list=adj.get(temp);
            for(Integer neighbour:list){
                incomingDegree.put(neighbour,incomingDegree.get(neighbour)-1);
                if(incomingDegree.get(neighbour)==0){
                    q.add(neighbour);
                }
            }
            
        }
        return result;
    }
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean visited[]=new boolean[V];
        boolean recursiveStack[]=new boolean[V];
        for(int i=0;i<V;i++){
            
                if(dfs(i,adj,visited,recursiveStack)){
                    return true;
                }
           
        }
     return false;
        
    }
    public boolean dfs(int index,ArrayList<ArrayList<Integer>> adj,boolean visited[],boolean recursiveStack[]){
       
        if(recursiveStack[index]){
            return true;
        }
        if(visited[index]){
            return false;
        }
        visited[index]=true;
        recursiveStack[index]=true;
        List<Integer> list=adj.get(index);
        for(Integer neighbour:list){
            
            if(dfs(neighbour,adj,visited,recursiveStack)){
                return true;
            }
            
        }
        visited[index]=true;
        recursiveStack[index]=false;
        
        return false;
    }
    
}
