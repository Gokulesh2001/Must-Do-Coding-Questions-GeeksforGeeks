Time exceeded approach

class solve{
    static int minJumps(int[] arr){
        // your code here
        if(arr.length<=1){
            return 0;
        }
        if(arr[0]==0){
            return -1;
        }
        int[] minJumps=new int[arr.length];
        Arrays.fill(minJumps,Integer.MAX_VALUE);
        minJumps[0]=0;
        int jumps=0;
        int maxRange=0;
        for(int i=0;i<arr.length;i++){
            for(int j=i+1;j<=i+arr[i] &&j<arr.length;j++){
                minJumps[j]=Math.min(minJumps[j],minJumps[i]+1);
            }
        }
       return minJumps[arr.length-1]==Integer.MAX_VALUE?-1:minJumps[arr.length-1];
    }
}




Correct ans:O(N)

class solve{
    static int minJumps(int[] arr){
        // your code here
        if(arr.length<=1){
            return 0;
        }
        if(arr[0]==0){
            return -1;
        }
        int maxReach=arr[0];
       int steps=arr[0];
       
       int jumps=1;
       
       for(int i=1;i<arr.length;i++){
           if(i==arr.length-1){
               return jumps;
           }
           maxReach=Math.max(maxReach,i+arr[i]);
           
           steps--;
           if(steps==0){
               jumps++;
           
           if (i >= maxReach)
                    return -1;
                    
            steps=maxReach-i;
           }
          
       }
       return -1;
    }
}