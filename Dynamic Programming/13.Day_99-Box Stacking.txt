class node{
    int h;
    int w;
    int l;
    node(int i,int j,int k){
        h=i;
        w=j;
        l=k;
    }
}


class Geeks 
{
    public static int maxHeight(int height[], int width[], int length[], int n)
   {
       // your code here
       
       node arr[]=new node[n*3];
       int index=0;
       for(int i=0;i<n;i++){
           arr[index]=new node(height[i],Math.max(width[i],length[i]),Math.min(width[i],length[i]));
          index++;
          
         arr[index]=new node(width[i],Math.max(length[i],height[i]),Math.min(length[i],height[i]));
          index++;
          
          arr[index]=new node(length[i],
          Math.max(width[i],height[i]),
          Math.min(width[i],height[i]));
          index++;
          
       }
       Arrays.sort(arr,new Comparator<node>() {

        public int compare(node a, node b) {
        	
          int o1 = a.l*a.w;
          int o2 = b.l*b.w;
          
          //ascending order
          return o1-o2;
           }

    
});
       int[] dp=new int[index];
       
       for(int i=0;i<index;i++){
           dp[i]=arr[i].h;
           
       }
       int max=Integer.MIN_VALUE;
       for(int i=1;i<index;i++){
         for(int j=0;j<i;j++){
           if(arr[i].l>arr[j].l && arr[i].w>arr[j].w && dp[i]<dp[j]+arr[i].h){
               dp[i]=dp[j]+arr[i].h;
               max=Integer.max(max,dp[i]);
           }
       }  
       }
    return max;   
   }
}

