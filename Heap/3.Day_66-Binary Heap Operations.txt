class MinHeap {
    int[] harr;
    int capacity,heap_size;
    MinHeap(int cap) {
        heap_size = 0;
        capacity = cap;
        harr = new int[cap];
    }
    int parent(int i) { return (i - 1) / 2; }
    int left(int i) { return (2 * i + 1); }
    int right(int i) { return (2 * i + 2); }

    // You need to write code for below three functions
    int extractMin() {
        // Your code here.
        // MinHeapify(0);
        
        if (heap_size <= 0) 
        return -1; 
    if (heap_size == 1) 
    { 
        heap_size--; 
        return harr[0]; 
    } 
        int root = harr[0]; 
        harr[0] = harr[heap_size-1]; 
        heap_size--; 
        MinHeapify(0); 
        return root;
    }

    void insertKey(int k) {
        // Your code here.
         heap_size++; 
    int i = heap_size - 1; 
    harr[i] = k; 
  
    // Fix the min heap property if it is violated 
    while (i != 0 && harr[parent(i)] > harr[i]) 
    { 
       int temp = harr[i];
            harr[i] = harr[parent(i)];
            harr[parent(i)] = temp;
       i = parent(i); 
    } 
    }

    void deleteKey(int i) {
        // Your code here.
        if(i>=heap_size){
            return;
        }
        int o=Integer.MIN_VALUE;
        decreaseKey(i,o);
        extractMin();
        
        // try{
        // int key = harr[i];
        // harr[i] = harr[heap_size -1];
        // heap_size--;
       
        // MinHeapify(i);
        // }
        // catch(ArrayIndexOutOfBoundsException ex){
            
        // }
        
    }

    // Decrease key operation, helps in deleting the element
    void decreaseKey(int j, int new_val) {
        // try{
        harr[j] = new_val;
        
        while (j != 0 && harr[parent(j)] > harr[j]) {
            int temp = harr[j];
            harr[j] = harr[parent(j)];
            harr[parent(j)] = temp;
            j = parent(j);
        }
        // }
        // catch(ArrayIndexOutOfBoundsException ex){
            
        // }
    }

    /* You may call below MinHeapify function in
      above codes. Please do not delete this code
      if you are not writing your own MinHeapify */
    void MinHeapify(int i) {
        int l = left(i);
        int r = right(i);
        int smallest = i;
        if (l < heap_size && harr[l] < harr[smallest]) smallest = l;
        if (r < heap_size && harr[r] < harr[smallest]) smallest = r;
        if (smallest != i) {
            int temp = harr[i];
            harr[i] = harr[smallest];
            harr[smallest] = temp;
            MinHeapify(smallest);
        }
    }
    
    
    // void heapifyUp(int i) {
    //     int temp = harr[i];
    //     while(i>0 && temp > harr[parent(i)]){
    //         harr[i] = harr[parent(i)];
    //         i = parent(i);
    //     }
    //     harr[i] = temp;
    // }
    
    // void MaxHeapify(int i) {
    //     int temp = harr[i];
    //     while(i>0 && temp > harr[parent(i)]){
    //         harr[i] = harr[parent(i)];
    //         i = parent(i);
    //     }
    //     harr[i] = temp;
    //     }
    
    
}