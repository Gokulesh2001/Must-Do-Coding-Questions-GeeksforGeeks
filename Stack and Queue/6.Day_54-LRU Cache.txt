
class LRUCache
{
    
    final Node head=new Node();
    final Node tail=new Node();
    HashMap<Integer,Node> node_map;
    int cache_capacity;
    LRUCache(int cap)
    {
        // Intialize the cache capacity with the given
        // cap
        node_map=new HashMap<>();
        this.cache_capacity=cap;
        head.next=tail;
        tail.prev=head;
    }

    // This method works in O(1)
    public  int get(int key)
    {
        // your code here
        int result=-1;
        Node node=node_map.get(key);
         if(node!=null){
             result=node.value;
             remove(node);
             add(node);
         }
        return result;
    }

    // This method works in O(1)
    public  void set(int key, int value)
    {
        // your code here
        Node node=node_map.get(key);
        if(node!=null){
            remove(node);
            node.value=value;
            add(node);
        }
        else{
            if(node_map.size()==cache_capacity){
                node_map.remove(tail.prev.key);
                remove(tail.prev);
            }
            Node new_node=new Node();
            new_node.key=key;
            new_node.value=value;
            
            node_map.put(key,new_node);
            add(new_node);
        }
    }
    
    public void add(Node node){
        node.next = head.next; 
        node.next.prev = node; 
        node.prev = head; 
        head.next = node;   
    }
    public void remove(Node node){
        node.prev.next = node.next; 
        node.next.prev = node.prev; 
    }
    class Node{
        int key;
        int value;
        Node next;
        Node prev;
    }
}
