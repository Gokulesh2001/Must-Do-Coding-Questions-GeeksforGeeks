class Solution{
    
    static ArrayList<ArrayList<Integer>> list=new ArrayList<ArrayList<Integer>>();
    static ArrayList<Integer> l=new ArrayList<Integer>();
    
    
    static ArrayList<ArrayList<Integer>> nQueen(int n) {
        // code here
        int mat[][]=new int[n][n];
        
       
        boolean ans=nQueenUtil(0,mat);
        
        ArrayList<ArrayList<Integer>> res=new ArrayList<ArrayList<Integer>>(list);
        list.removeAll(list);
        return res;
    }
    
    static boolean nQueenUtil(int col,int mat[][]){
        if(col>=mat.length){
            
            return true;
        }
        for(int i=0;i<mat.length;i++){
            if(isSafe(i,col,mat)){
            
            mat[i][col]=1;
            l.add(i+1);
            if(nQueenUtil(col+1,mat)==true){
                
                list.add(new ArrayList<>(l));
                
                }
                
                mat[i][col]=0;
            l.remove(l.size()-1);
            }
            
            }
        
        return false;
    }
    
    static boolean isSafe(int row,int col,int[][] mat){
        for(int i=0;i<col;i++){
            if(mat[row][i]==1){
                return false;
            }
        }
        
        for(int i=row,j=col;i>=0&&j>=0;i--,j--){
            if(mat[i][j]==1){
                return false;
            }
        }
        for(int i=row,j=col;i<mat.length&&j>=0;i++,j--){
            if(mat[i][j]==1){
                return false;
            }
        }
        
        return true;
    }
}