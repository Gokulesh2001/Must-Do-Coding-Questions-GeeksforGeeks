class Solution {
    static ArrayList<String> list=new ArrayList<String>();
    public static ArrayList<String> findPath(int[][] m, int n) {
        // Your code here
        if(m[0][0]==0 || m[n-1][n-1]==0){
            return new ArrayList<String>();
        }
        boolean visited[][]=new boolean[n][n];
        
        path(0,0,m,n,visited,new String(""));
        ArrayList<String> result=new ArrayList<String>(list);
        Collections.sort(result);
        list.removeAll(list);
        return result;
    }
    
    public static void path(int row,int col,int[][] m,int n,boolean[][] visited,String str){
         if(row==n-1 && col==n-1){
             list.add(str);
             return;
         }
         
        visited[row][col]=true;
        if(isValid(row-1,col,n)&&visited[row-1][col]!=true && m[row-1][col]==1 ){
            str=str.concat("U");
            path(row-1,col,m,n,visited,str);
            str=str.substring(0,str.length()-1);
        }
        if(isValid(row,col+1,n)&&visited[row][col+1]!=true && m[row][col+1]==1 ){
            str=str.concat("R");
            path(row,col+1,m,n,visited,str);
            str=str.substring(0,str.length()-1);
        }
        if(isValid(row,col-1,n)&&visited[row][col-1]!=true && m[row][col-1]==1 ){
            str=str.concat("L");
            path(row,col-1,m,n,visited,str);
            str=str.substring(0,str.length()-1);
        }
        if(isValid(row+1,col,n)&&visited[row+1][col]!=true && m[row+1][col]==1 ){
            str=str.concat("D");
            path(row+1,col,m,n,visited,str);
            str=str.substring(0,str.length()-1);
        }
        
        visited[row][col]=false;
        return;
    }
    
    public static boolean isValid(int row,int col,int n){
        if(row<0 || col<0 || row>=n || col>=n){
            return false;
        }
        return true;
    }
}



========================================================================================================================

class Solution {
     
    public static ArrayList<String> findPath(int[][] m, int n) {
        // Your code here
        
        // boolean visited[][]=new boolean[n][n];
        ArrayList<String> list=new ArrayList<String>();
        String bf="";
        backtrack(m,n,list,0,0,bf);
        return list;
    }
    
    public static void backtrack(int[][] m,int n,ArrayList<String> list,int i,int j,String bf)
    {
           if(i<0 || i>=n || j<0 || j>=n || m[i][j]==0)
        {
            //bf.remove()
            //We have taken wrong step, go back;
            return;
        }
        if(i==n-1 && j==n-1)
        {
            list.add(bf+"");
            //bf.deleteCharAt(bf.length()-1);
            return;
        }
        
       //Now we have four options;
        m[i][j]=0; //making it visited;
        
        backtrack(m,n,list,i+1,j,bf+"D");
        backtrack(m,n,list,i,j-1,bf+"L");
        backtrack(m,n,list,i,j+1,bf+"R");
        backtrack(m,n,list,i-1,j,bf+"U");
        
        m[i][j]=1;
    }
}