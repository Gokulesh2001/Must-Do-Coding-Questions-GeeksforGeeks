class Solution
{
    static ArrayList<ArrayList<Integer>> combinationSum(int A[], int N, int B)
    {
        // code here
        ArrayList<Integer> current =new ArrayList<Integer>();
        ArrayList<ArrayList<Integer>> result=new ArrayList<ArrayList<Integer>>();
        Arrays.sort(A);
        combinationSumHelper(A,B,0,current,result);
        return result;
        
        
    }
    
    static void combinationSumHelper(int A[],  int target,int index,ArrayList<Integer> current,ArrayList<ArrayList<Integer>> result){
        if(target==0){
            result.add(new ArrayList<>(current));
        }
        
        for(int i=index;i<A.length;i++){
            if(i==index || A[i]!=A[i-1]){
                int pick=A[i];
                if(target-pick<0){
                    break;
                }
                current.add(A[i]);
                combinationSumHelper(A,target-A[i],i+1,current,result);
                current.remove(current.size()-1);
            }
        }
    }
}