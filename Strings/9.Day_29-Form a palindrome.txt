My Solution:

class Solution{
    public int palindrome(String str){
        int count=0;
        char temp=str.charAt(0);
        for(int l=0;l<str.length();l++){
            if(temp==str.charAt(l)){
                count+=1;
            }
            temp=str.charAt(l);
        }
        String strRev=reverse(str);
        
    if(str.equals(strRev)==true){
        return 0;
    }
    String strRevUse=new String(strRev);
    String strUse=new String(str);
    
    for(int j=0;j<str.length();j++){
       strRevUse=(str.substring(0,j+1)).concat(strRev);
       strUse=(str).concat(reverse(str.substring(0,j+1)));
       if(strUse.equals(strRevUse)==true){
           return j+1;
       }
       strRevUse="";
       strUse="";
       strRevUse=strRevUse.concat(strRev);
    }
    for(int k=0;k<str.length();k++){
       strRevUse=(strRev.substring(0,k+1)).concat(str);
       strUse=(str).concat(reverse(str.substring(0,k+1)));
       if(str.equals(strRevUse)==true){
           return k+1;
       }
       strRevUse="";
       strRevUse=strRevUse.concat(str);
    }
    if(count>0){
        return str.length()-count;
    }
    return str.length()-1;
    }
    
    public String reverse(String str){
        String strRev="";
        char[] arr=str.toCharArray();
        for (int i = arr.length - 1; i >= 0; i--){
            strRev=strRev.concat(arr[i]+"");
    }
    return strRev;
    }
}


Another:
class Solution{
    static int findMinInsertions(char str[], int l, 
                                             int h) 
    { 
        // Base Cases 
        if (l > h) return Integer.MAX_VALUE; 
        if (l == h) return 0; 
        if (l == h - 1) return (str[l] == str[h])? 0 : 1; 
  
        // Check if the first and last characters 
        // are same. On the basis of the  comparison 
        // result, decide which subrpoblem(s) to call 
        return (str[l] == str[h])? 
            findMinInsertions(str, l + 1, h - 1): 
            (Integer.min(findMinInsertions(str, l, h - 1), 
            findMinInsertions(str, l + 1, h)) + 1); 
    } 

}


Dynamic programming:
class Solution{
    static int findMinInsertionsDP(char str[], int n) 
    { 
        // Create a table of size n*n. table[i][j] 
        // will store minumum number of insertions 
        // needed to convert str[i..j] to a palindrome. 
        int table[][] = new int[n][n]; 
        int l, h, gap; 
  
        // Fill the table 
        for (gap = 1; gap < n; ++gap) 
        for (l = 0, h = gap; h < n; ++l, ++h) 
            table[l][h] = (str[l] == str[h])? 
                           table[l+1][h-1] : 
                          (Integer.min(table[l][h-1], 
                                 table[l+1][h]) + 1); 
  
        // Return minimum number of insertions 
        // for str[0..n-1] 
        return table[0][n-1]; 
    } 
}

