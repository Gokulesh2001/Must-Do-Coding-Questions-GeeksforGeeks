class Solution
{   
    static int getSum(long X[], int n) 
    { 
        int sum = 0; 
        for (int i = 0; i < n; i++) 
            sum += X[i]; 
        return sum; 
    } 
      
    // Function to calculate : a - b = (sumA - sumB) / 2 
    static int getTarget(long A[], int n, long B[], int m) 
    { 
        // Calculation of sums from both arrays 
        int sum1 = getSum(A, n); 
        int sum2 = getSum(B, m); 
   
        // because that the target must be an integer 
        if ((sum1 - sum2) % 2 != 0) 
            return -1; 
        if((sum1-sum2)==0)
        return 0;
        return ((sum1 - sum2) / 2); 
    }
    static long findSwapValues(long A[], int n, long  B[], int m)
    {
        // Your code goes here
        Arrays.sort(A); 
        Arrays.sort(B); 
   
        // Note that target can be negative 
        int target = getTarget(A, n, B, m); 
   
        // target 0 means, answer is not possible 
        if (target ==-1 ) 
            return -1; 
   
        int i = 0, j = 0; 
        while (i < n && j < m)  
        { 
            long diff = A[i] - B[j]; 
            if (diff == target)  
            { 
                 
                return 1; 
            } 
   
            // Look for a greater value in A[] 
            else if (diff < target) 
                i++; 
   
            // Look for a greater value in B[] 
            else
                j++; 
        } 
        return -1;
    }
}
