class solve
{
    // return the smallest window in S with all the characters of P
    // if no such window exists, return "-1" 
    public static String smallestWindow(String S, String P){
        // Your code here
        if( S.length()==0  || P.length()==0){
            return "-1";
        }
        
        Map<Character,Integer> map=new HashMap<>();
        int matchedCharacter=0;
        int start=0;
        int minSubStringLength=Integer.MAX_VALUE;
        int minSubStringStart=0;
        
        for(int i=0;i<P.length();i++){
            map.put(P.charAt(i),map.getOrDefault(P.charAt(i),0)+1);
        }
        
        for(int end=0;end<S.length();end++){
            char currentChar=S.charAt(end);
            
            if(map.containsKey(currentChar)){
                map.put(currentChar,map.get(currentChar)-1);
                if(map.get(currentChar)>=0){
                    matchedCharacter++;
                }
            }
           while(matchedCharacter==P.length()){
               if(end-start+1<minSubStringLength){
                   minSubStringLength=end-start+1;
                   minSubStringStart=start;
               }
               
               
               char charAtStart=S.charAt(start++);
               
               
               if(map.containsKey(charAtStart)){
                   if(map.get(charAtStart)==0){
                       matchedCharacter--;
                   }
                   map.put(charAtStart,map.get(charAtStart)+1);
               }
           } 
        }
      if(minSubStringLength>S.length()){
          return "-1";
      } 
      
      return S.substring(minSubStringStart,minSubStringStart+minSubStringLength);
    }
}