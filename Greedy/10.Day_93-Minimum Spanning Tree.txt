class Solution {
    static int spanningTree(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj) {
        // Add your code here
        int[][] mat=new int[V][V];
        for(int i=0;i<adj.size();i++){
            for(int j=0;j<adj.get(i).size();j++){
                
                mat[i][adj.get(i).get(j).get(0)]=adj.get(i).get(j).get(1);
            }
        }
        
        
        
        
        int[] dist=new int[adj.size()];
        
        
        
        boolean[] mstSet=new boolean[adj.size()];
        
        
        Arrays.fill(mstSet,false);
        
        
        for(int i=1;i<adj.size();i++){
            dist[i]=Integer.MAX_VALUE;
        }
        dist[0]=0;
        
        
           for(int i=0;i<V-1;i++){
               int u=minKey(dist,mstSet);
               mstSet[u]=true;
              for(int j=0;j<V;j++){
                  if(mat[u][j]!=0&&mstSet[j]==false && mat[u][j]<dist[j]){
                      dist[j]=mat[u][j];
                  }
              }
           }
          int minCost=0;
          for(int element:dist){
              minCost+=element;
          }
        
    return minCost;
}

static int minKey(int dist[],boolean mstSet[] ){
    int min=Integer.MAX_VALUE,minIndex=0;
    for(int i=0;i<dist.length;i++){
        if(mstSet[i]==false && dist[i]<min){
            min=dist[i];
            minIndex=i;
        }
    }
    return minIndex;
}
}
